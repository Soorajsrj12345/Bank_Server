Server Creation
.................

1) - create package.json file    -> npm init
2) - install express framework   -> npm i express   ( locally installing)


server side technology  - node - resolve multiple requests at a time

api
----
http request

header               body
secret data         data-json type

types
.......

GET    - read
POST   - create
PUT    - complete updation
PATCH  - partial updation
DELETE - remove


server response status code
.............................

100 - infromation
200 - success
300 - redirection
400 - client side error
500 - server side error



Server Creation Steps
......................

1)  import express
2)  create app using express
3)  port number setting - 3000 series
4)  resolve http requests


Nodemon
........

 if we run server using node , recombilation not work
 So we use another server called Nodemon

 npm i -g nodemon  (globally installing)

..........................................................................................................
 .status(statuscode)    -> for changing status code  ..change the response status code as statuscode            
 .json(result)          -> convert js to json   and send the data as response                      
 express.json()         -> convert all request datas from json to js                      
 .........................................................................................................



 TOKEN IN SERVER 
 .................

 JWT TOKEN - json web token 
 install
       -> npm i jsonwebtoken
->library - jsonwebtoken
->sign()  - method used to generate jwt token  
->verify()- used to verify json web token


Token verification
...................

token verification can do using middlewares.
middlewares have the capacity to control server requests.
  - middleware is a function with three arguments  ->   request,response,next
  -two types of middlewares

        1)Application Specific middleware -->  work before all requests in server
        2)Router Specific middleware      -->  can apply to specific requests in server




How to solve runtime errors in js
..................................

try-except

try    -> error causing code  ... chances of errors in code

catch  -> error solve    




..........................................................................................................................................

     Mongo DB  -   database

..........................................................................................................................................

install mongodb server 



shell commands
................

CRUD (create,read,update,delete)

1) show dbs                                            ->  to see databases
2) use (database_name)                                 ->  to open database
3) show collections                                    ->   to see collectons inside db
4) db.(collection_name).find()                         -> to read all data in collection 

5) db.(collection_name). findOne({acno:1000})                            
                                              -> to read single data

6) db.(collection_name).insertOne({"acno":1001,"name":"amal",...})    -> create new data
                                                                 

7) db.(collection_name).find({balance:{gt:4000}})    ->  find using a condition

8) db.(collection_name).deleteOne({"uname":"anu"}) 
                                      delete count  -> used to delete

9) db.(collection_name).updateOne({uname:anu},{$set:{uname:anu v}})        ->   update data 


register  -   insertOne

login     -   findOne

deposit   -   updateOne

withdraw  -   updateOne

transaction history -  findOne

delete    -   deleteOne




Server Database Integration 
............................

database  - 27017    (port)
server    - 3000

mongoose - library used to server mdb integration

insatll -> npm i mongoose 

Steps
.....

1) import mongoose
2) state a connection string to integrate
3) define a model for our collection



FrontEnd Server Integration
............................

CORS - cross origin resource sharing -> library used to frontend server integration
(4200 - 3000)

Steps

1- import cors 
2- connection string  ->( used after creating app)

